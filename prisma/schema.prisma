generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid
  email String @unique
  name String
  password String

  role UserRole
  status Status @default(online)

  lastLogin DateTime?

  jobTitle String?
  profileImageUrl String?
  bannerImageUrl String?
  professionalBio String?
  socialLinks Social[]

  /* 
    PASSWORD RESET
  */
  passwordResetToken PasswordResetToken[]

  companyInfo CompanyInformation?

  notificationPreferences NotificationPreferences?

  securitySettings SecuritySettings?

  applicationPreferences ApplicationPreferences?

  manufacturerProfile ManufacturerProfile?
  brandProfile BrandProfile?
  retailerProfile RetailerProfile?

  orders Order[]

  reviewsWritten Review[]

  addedSuppliers Supplier[]

  userOneMatches Match[] @relation("UserOneMatches")
  userTwoMatches Match[] @relation("UserTwoMatches")

  userMatchStatus UserMatchStatus[] @relation("UserMatchStatuses")

  /*
    RELATIONSHIPS
  */
  // When User's role is BRAND
  brandPartnershipsWithRetailers RetailerBrandPartnership[] @relation("RetailerBrandPartnerships_Brand")
  brandPartnershipsWithManufacturers ManufacturerBrandPartnership[] @relation("ManufacturerBrandPartnerships_Brand")

  // When User's role is RETAILER
  retailerPartnershipsWithBrands RetailerBrandPartnership[] @relation("RetailerBrandPartnerships_Retailer")
  retailerPartnershipsWithManufacturers ManufacturerRetailerPartnership[] @relation("ManufacturerRetailerPartnerships_Retailer")

  // When User's role is MANUFACTURER
  manufacturerPartnershipsWithBrands    ManufacturerBrandPartnership[]    @relation("ManufacturerBrandPartnerships_Manufacturer")
  manufacturerPartnershipsWithRetailers ManufacturerRetailerPartnership[] @relation("ManufacturerRetailerPartnerships_Manufacturer")

  isProfilePublic Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model ManufacturerProfile {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  products CatalogProduct[]

  inventoryItems InventoryItems[]

  certification Certification[]

  productionLines ProductionLine[]

  manufacturingCapability ManufacturingCapability?

  isVerifiedManufacturer Boolean @default(false)
  showProductionCapacity Boolean @default(false)
  showCertifications Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("manufacturer_profiles")
}

model BrandProfile {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  growthRateYoY Float?
  marketPenetrationPercentage Float?
  marketSharePercentage Float?
  estimatedShopperReachK Int?
  totalRetailerSales Float?

  productFeatures String[]
  brandCertifications String[]
  sustainabilityClaims String[]

  totalSocialMediaFollowers Int?
  averageEngagementRate Float?

  marketingCampaigns MarketingCampaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("brand_profiles")
}

model MarketingCampaign {
  id String @id @default(uuid()) @db.Uuid

  brandProfileId String @db.Uuid
  brandProfile BrandProfile @relation(fields: [brandProfileId], references: [id], onDelete: Cascade)

  name String
  description String?
  startDate DateTime?
  endDate DateTime?
  targetAudience String?
  campaignType CampaignType?
  status CampaignStatus @default(upcoming)

  marketingBudget Float?
  budgetAllocationJson Json? @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brandProfileId])
  @@map("marketing_campaigns")
}

model RetailerProfile {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  businessType String?
  storeFormat String?
  averageStoreSize String?
  customerBaseDescription String?
  
  totalSkus Int?
  activeCustomerCount Int?
  averageMonthlySales Float?
  salesGrowthRateYoY Float?
  inventoryInStockPercentage Float?
  fulfillmentPercentage Float?

  topSellingCategoriesJson Json? @db.JsonB
  customerDemographicsJson Json? @db.JsonB
  purchaseFrequencyJson Json? @db.JsonB

  storeLocations StoreLocation[]
  retailerProducts RetailerProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("retailer_profiles")
}

model StoreLocation {
  id String @id @default(uuid()) @db.Uuid

  retailerProfileId String @db.Uuid
  retailerProfile RetailerProfile @relation(fields: [retailerProfileId], references: [id], onDelete: Cascade)

  name String
  addressStreet String?
  addressCity String?
  addressState String?
  addressZipCode String?
  sizeSqFt Int?
  locationType String?
  isPrimary Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([retailerProfileId])
  @@map("store_locations")
}

model RetailerProductCategory {
   id String @id @default(uuid()) @db.Uuid
   name String @unique

   retailerProducts RetailerProduct[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@map("retailer_product_categories")
}

model RetailerProduct {
  id String @id @default(uuid()) @db.Uuid

  retailerProfileId String @db.Uuid
  retailerProfile RetailerProfile @relation(fields: [retailerProfileId], references: [id], onDelete: Cascade)

  categoryId String @db.Uuid
  category RetailerProductCategory @relation(fields: [categoryId], references: [id])

  sku String
  name String
  description String?

  stockLevel Int @default(0)
  needsRestock Boolean @default(false)
  reorderPoint Int?
  price Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([retailerProfileId, sku])
  @@index([retailerProfileId])
  @@index([categoryId])
  @@map("retailer_products")
}

model RetailerBrandPartnership {
  id String @id @default(uuid()) @db.Uuid

  retailerUserId String @db.Uuid
  retailerUser User @relation("RetailerBrandPartnerships_Retailer", fields: [retailerUserId], references: [id], onDelete: Cascade)

  brandUserId String @db.Uuid
  brandUser User @relation("RetailerBrandPartnerships_Brand", fields: [brandUserId], references: [id], onDelete: Cascade)

  partnershipType String?
  agreementDetails String?
  isActive Boolean @default(true)
  notes String?

  partnershipStartDate DateTime?
  partnershipEndDate DateTime?

  partnershipTier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([retailerUserId, brandUserId])
  @@index([retailerUserId])
  @@index([brandUserId])
  @@map("retailer_brand_partnerships")
}

model ManufacturerBrandPartnership {
  id String @id @default(uuid()) @db.Uuid

  manufacturerUserId String @db.Uuid
  manufacturerUser User @relation("ManufacturerBrandPartnerships_Manufacturer", fields: [manufacturerUserId], references: [id], onDelete: Cascade)

  brandUserId String @db.Uuid
  brandUser User @relation("ManufacturerBrandPartnerships_Brand", fields: [brandUserId], references: [id], onDelete: Cascade)

  partnershipType String?
  agreementDetails String?
  isActive Boolean @default(true)
  notes String?

  partnershipStartDate DateTime?
  partnershipEndDate DateTime?

  partnershipTier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([manufacturerUserId, brandUserId])
  @@index([manufacturerUserId])
  @@index([brandUserId])
  @@map("manufacturer_brand_partnerships")
}

model ManufacturerRetailerPartnership {
  id String @id @default(uuid()) @db.Uuid

  manufacturerUserId String @db.Uuid
  manufacturerUser User @relation("ManufacturerRetailerPartnerships_Manufacturer", fields: [manufacturerUserId], references: [id], onDelete: Cascade)

  retailerUserId String @db.Uuid
  retailerUser User @relation("ManufacturerRetailerPartnerships_Retailer", fields: [retailerUserId], references: [id], onDelete: Cascade)

  partnershipType String?
  agreementDetails String?
  creditTerms String?
  minimumOrderRequirements String?
  isActive Boolean @default(true)
  notes String?
  
  partnershipTier String?

  partnershipStartDate DateTime?
  partnershipEndDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([manufacturerUserId, retailerUserId])
  @@index([manufacturerUserId])
  @@index([retailerUserId])
  @@map("manufacturer_retailer_partnerships")
}

model Certification {
  id String @id @default(uuid()) @db.Uuid

  manufacturerProfileId String @db.Uuid
  manufacturerProfile ManufacturerProfile @relation(fields: [manufacturerProfileId], references: [id], onDelete: Cascade)

  name String
  description String?
  issuingOrganization String?
  certificateNumber String?
  issueDate DateTime?
  expiryDate DateTime?

  certificationCompliance String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([manufacturerProfileId])
  @@index([expiryDate])
  @@map("certifications")
}

model CompanyInformation {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  name String
  companyEmail String?
  phoneNumber String?
  companyWebsite String?
  establishedYear Int?
  industry String?
  companySize String?
  speciallization String?
  companySubtitle String?

  addressStreet String?
  addressCity String?
  addressState String?
  addressZipCode String?
  addressCountry String?

  companyDescription String?

  tags CompanyTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("company_information")
}

model CompanyTag {
  id String @id @default(uuid()) @db.Uuid
  name String

  companyInfo CompanyInformation @relation(fields: [companyInfoId], references: [id], onDelete: Cascade)
  companyInfoId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyInfoId, name])
  @@index([companyInfoId])
  @@map("company_tags")
}

model ManufacturingCapability {
  id String @id @default(uuid()) @db.Uuid

  manufacturerProfileId String @unique @db.Uuid
  manufacturerProfile ManufacturerProfile @relation(fields: [manufacturerProfileId], references: [id], onDelete: Cascade)

  productionCapacity Int?
  minimumOrderValue Float?

  materialsHandled MaterialHandled[]

  specialties Specialty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([manufacturerProfileId])
  @@map("manufacturing_capabilities")
}

model MaterialHandled {
  id String @id @default(uuid()) @db.Uuid
  name String
 
  manufacturingCapability ManufacturingCapability @relation(fields: [manufacturingCapabilityId], references: [id], onDelete: Cascade)
  manufacturingCapabilityId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([manufacturingCapabilityId, name])
  @@index([manufacturingCapabilityId])
  @@map("materials_handled")
}

model Specialty {
  id String @id @default(uuid()) @db.Uuid
  name String

  manufacturingCapability ManufacturingCapability @relation(fields: [manufacturingCapabilityId], references: [id], onDelete: Cascade)
  manufacturingCapabilityId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([manufacturingCapabilityId, name])
  @@index([manufacturingCapabilityId])
  @@map("specialties")
}

model NotificationPreferences {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  emailNotifications Boolean @default(true)
  messageNotifications Boolean @default(true)
  matchNotifications Boolean @default(true)
  marketingEmails Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("notification_preferences")
}

model SecuritySettings {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /*
    SECURITY SETTINGS
  */
  twoFactorAuthentication Boolean @default(false)
  twoFactorSecret String?
  twoFactorConfirmed Boolean @default(false)

  backupCodes String[]

  alertNewLogin Boolean @default(true)
  alertNewDeviceLogin Boolean @default(true)
  alertPasswordChanges Boolean @default(true)
  alertSuspiciousActivity Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("security_settings")
}

model ApplicationPreferences {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  language String @default("English")
  theme String @default("light")
  compactSidebarEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("application_preferences")
}

model ProductionLine {
  id String @id @default(uuid()) @db.Uuid

  manufacturerProfileId String @db.Uuid
  manufacturerProfile ManufacturerProfile @relation(fields: [manufacturerProfileId], references: [id], onDelete: Restrict)

  name String
  lineType String?
  capacityValue Float?
  capacityUnit String?
  initialStatus String?
  operatorAssigned String
  targetEfficiency Int?
  nextMaintenanceDate DateTime?
  operationalSince DateTime?
  energyConsumptionKwh Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([manufacturerProfileId])
  @@map("production_lines")
}

model InventoryItems {
  id String @id @default(uuid()) @db.Uuid

  manufacturerProfileId String @db.Uuid
  manufacturerProfile ManufacturerProfile @relation(fields: [manufacturerProfileId], references: [id], onDelete: Restrict)

  itemName String
  itemCategory String
  itemSKU String
  currentStock Int @default(0)
  maximumStock Int?
  storageLocation String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([manufacturerProfileId, itemSKU])
  @@index([manufacturerProfileId])
  @@map("inventory_items")
}

model CatalogProduct {
  id String @id @default(uuid()) @db.Uuid

  manufacturerProfileId String @db.Uuid
  manufacturerProfile ManufacturerProfile @relation(fields: [manufacturerProfileId], references: [id], onDelete: Cascade)

  name String
  
  productCategoryId String @db.Uuid
  productCategory ProductCategory @relation(fields: [productCategoryId], references: [id])

  minimumOrderQuantity Int
  dailyCapacity Int
  unitType UnitType @default(units)
  currentAvailableStock Int
  pricePerUnit Float 
  productType ProductType @default(finishedGood)
  leadTime String?
  leadTimeUnit LeadTimeUnit @default(days)
  description String?
  imageUrl String?
  isSustainableProduct Boolean @default(false)
  productSKU String

  isBestSeller Boolean @default(false)
  isPopular Boolean @default(false)

  productReviews Review[]

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([manufacturerProfileId, productSKU])
  @@index([manufacturerProfileId])
  @@index([productCategoryId])
  @@index([name])
  @@map("catalog_products")
}

model ProductCategory {
  id String @id @default(uuid()) @db.Uuid

  name String @unique

  products CatalogProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_categories")
}

model Review {
  id String @id @default(uuid()) @db.Uuid

  userId String @db.Uuid
  author User @relation(fields: [userId], references: [id], onDelete: Cascade)

  catalogProductId String @db.Uuid
  product CatalogProduct @relation(fields: [catalogProductId], references: [id], onDelete: Cascade)

  rating Int?
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, catalogProductId])
  @@index([userId])
  @@index([catalogProductId])
  @@map("reviews")
}

model Order {
  id String @id @default(uuid()) @db.Uuid

  userId String @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  productId String @db.Uuid
  product CatalogProduct @relation(fields: [productId], references: [id], onDelete: Restrict)

  quantity Int
  totalPrice Float
  status OrderStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@map("orders")
}

model Social {
  id String @id @default(uuid()) @db.Uuid

  userId String @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  platform String
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, platform])
  @@index([userId])
  @@map("social_links")
}

model Supplier {
  id String @id @default(uuid()) @db.Uuid
  name String

  userId String @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  supplierCategoryId String @db.Uuid
  supplierCategory SupplierCategory @relation(fields: [supplierCategoryId], references: [id])
  
  contactPerson String
  contactEmail String
  contactPhone String
  city String
  country String
  fullAddress String?
  description String?
  status SupplierStatus @default(pending)
  reliabilityRating Float?
  leadTime String?

  materials SupplierMaterial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([supplierCategoryId])
  @@map("suppliers")
}

model SupplierMaterial {
  id String @id @default(uuid()) @db.Uuid
  
  name String
  supplierId String @db.Uuid
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([supplierId, name])
  @@index([supplierId])
  @@map("supplier_materials")
}

model SupplierCategory {
  id String @id @default(uuid()) @db.Uuid

  name String @unique

  supplier Supplier[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("supplier_categories")
}

model Match {
  id String @id @default(uuid()) @db.Uuid

  userOneId String @db.Uuid
  userOne User @relation("UserOneMatches", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String @db.Uuid
  userTwo User @relation("UserTwoMatches", fields: [userTwoId], references: [id], onDelete: Cascade)

  establishedAt DateTime? // when the match was accepted
  terminatedAt DateTime?

  userStatus UserMatchStatus[] @relation("MatchUserStatus")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userOneId, userTwoId])
  @@index([userOneId])
  @@index([userTwoId])
  @@map("matches")
}

model UserMatchStatus {
  id String @id @default(uuid()) @db.Uuid

  userId String @db.Uuid
  user User @relation("UserMatchStatuses", fields: [userId], references: [id], onDelete: Cascade)
  
  matchId String @db.Uuid
  match Match @relation("MatchUserStatus", fields: [matchId], references: [id], onDelete: Cascade)

  isStarred Boolean @default(false)
  status MatchingStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, matchId])
  @@index([userId])
  @@index([matchId])
  @@index([userId, status])
  @@map("user_match_status")
}

model PasswordResetToken {
  id String @id @default(uuid()) @db.Uuid
  token String @unique

  userId String @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
  isUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

model Admin {
  id String @id @default(uuid()) @db.Uuid

  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

enum UserRole {
  manufacturer
  retailer
  brand
}

enum Status {
  online
  offline
  away
  busy
  active
  inactive
  pending
  suspended
}

enum UnitType {
  units
  boxes
  bottles
  kilograms
  liters
  sachets
  pairs
  cases
  packets
  cartons
  bags
  pouches
  jars
  tubes
  cans
}

enum ProductType {
  finishedGood
  semiFinishedGood
  rawMaterial
  component
  packagingMaterial
  bulkProduct
}

enum LeadTimeUnit {
  days
  weeks
  months
  years
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

enum SupplierStatus {
  pending
  active
}

enum MatchingStatus {
  pending
  accepted
  declined
  reconsidered
}

enum CampaignStatus {
  upcoming
  ongoing
  completed
  paused
  archived
}

enum CampaignType {
  digital
  print
  event
  influencer
  socialMedia
  emailMarketing
  inStore
  outdoor
}